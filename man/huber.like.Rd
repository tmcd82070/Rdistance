% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/huber.like.R
\name{huber.like}
\alias{huber.like}
\title{huber.like - Huber distance function}
\usage{
huber.like(a, dist, covars)
}
\arguments{
\item{a}{Distance at which the likelihood 
transitions from quadratic to linear.  First derivative
is constant just before and after this point.}

\item{range}{Distance beyond which the likelihood is zero.}
}
\value{
Vector of huber likelihood values.
}
\description{
Computes the Huber likelihood for use as a distance function. 
The Huber likelihood is based on Huber loss.  
It is quadratic from the lowest distance value to 
its first parameter, then linear from the first parameter
to its second. The function is zero after the second parameter. 
Values are scaled such that the integral from lowest distance 
value to the second parameter (\code{range}) is 1.0.
}
\details{
The `huber` likelihood is an inverted version of the 
Huber loss function scaled and constrained to the interval [0,1]. 
The `huber` likelihood is, 
\deqn{
   L(x|b,g) = 1 - h(x)/m
}
where
\deqn{
 m = b(0.5b + g)
}
and \emph{h(x)} is Huber loss with a plateau, i.e.,
\deqn{
 h(x) = 0.5x^2 ,
}
for \eqn{x < b}
\deqn{
 h(x) = b(x - 0.5b^2),
}
for \eqn{b < x < (b + g)}, and
\deqn{
 h(x) = m,
}
for \eqn{x > (b + g)}. 
The `huber` distance function is quadratic between \code{w.lo} and \emph{b}, 
linear between \emph{b} and \emph{b + g}, and 0 after \emph{b + g}.
}
\examples{

d <- seq(0, 100, length=101)
covs <- cbind(
   matrix(1,2*length(d),1)
 , matrix(c(rep(0,length(d)), rep(1,length(d))), 2*length(d), 1)
 )
y <- huber.like(c(log(40), -log(2), 40), d, covs)$L.unscaled
plot(d,y[1:101],type="l")
lines(d,y[102:202], col = "blue" )
abline(v = exp(log(40)), lty = 2)  # transition to linear, group 1
abline(v = exp(log(40) - log(2)), lty = 2) # transition to linear, group 2

# transitions to zero
exp(log(40)) + 40
exp(log(40) - log(2)) + 40

}
